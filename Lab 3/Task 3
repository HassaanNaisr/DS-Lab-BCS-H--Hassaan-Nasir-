#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node* next;
    Node(int val)
    {
        data = val;
        next = NULL;
    }
};

class LinkedList
{
public:
    Node* head;
    LinkedList()
    {
        head = NULL;
    }

    void insert(int val)
    {
        if(!head)
        {
            head = new Node(val);
            return;
        }
        Node* temp = head;
        while(temp->next)
        {
            temp = temp->next;
        }
        temp->next = new Node(val);
    }

    Node* reverseKGroup(Node* head, int k)
    {
        Node* curr = head;
        Node* prev = NULL;
        Node* next = NULL;
        int count = 0;
        Node* temp = head;
        for(int i = 0; i < k && temp; i++)
        {
            temp = temp->next;
            count++;
        }
        if(count < k)
        {
            return head;
        }
        count = 0;
        while(curr && count < k)
        {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            count++;
        }
        if(next)
        {
            head->next = reverseKGroup(next, k);
        }
        return prev;
    }

    void reverseInGroups(int k)
    {
        head = reverseKGroup(head, k);
    }

    void print()
    {
        Node* temp = head;
        while(temp)
        {
            cout << temp->data;
            if(temp->next) cout << " â†’ ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main()
{
    LinkedList list;
    for(int i = 1; i <= 8; i++)
    {
        list.insert(i);
    }
    int k = 3;
    list.reverseInGroups(k);
    list.print();
}
