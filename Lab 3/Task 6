#include <iostream>
using namespace std;

class Node
{
  public:
    int data;
    Node* next;
    Node* child;

    Node(int val)
    {
      data = val;
      next = NULL;
      child = NULL;
    }
};

class MultiList
{
  public:
    Node* head;

    MultiList()
    {
      head = NULL;
    }

    void insertAtEnd(int val)
    {
      Node* n = new Node(val);
      if (head == NULL)
      {
        head = n;
        return;
      }
      Node* t = head;
      while (t->next != NULL)
      {
        t = t->next;
      }
      t->next = n;
    }

    void flatten()
    {
      Node* curr = head;
      while (curr != NULL)
      {
        if (curr->child != NULL)
        {
          Node* nextNode = curr->next;
          curr->next = curr->child;

          Node* temp = curr->child;
          while (temp->next != NULL)
          {
            temp = temp->next;
          }
          temp->next = nextNode;

          curr->child = NULL;
        }
        curr = curr->next;
      }
    }

    void printList()
    {
      Node* t = head;
      while (t != NULL)
      {
        cout << t->data << " ";
        t = t->next;
      }
      cout << endl;
    }
};

int main()
{
  MultiList ml;
  ml.insertAtEnd(1);
  ml.insertAtEnd(2);
  ml.insertAtEnd(3);

  ml.head->next->child = new Node(4);
  ml.head->next->child->next = new Node(5);

  cout << "Before flattening: 1 2 3 with child at 2 > 4 5" << endl;
  ml.flatten();
  cout << "After flattening: ";
  ml.printList();

  return 0;
}
