#include <iostream>
using namespace std;

class Node
{
  public:
    int data;
    Node* next;

    Node(int val) 
    {
      data = val;
      next = NULL;
    }
};

class CircularList
{
  private:
    Node* head;

  public:
    CircularList() 
    {
      head = NULL;
    }

    void createCircle(int n) 
    {
      if (n <= 0) return;

      head = new Node(1);
      Node* prev = head;

      for (int i = 2; i <= n; i++) 
      {
        Node* newNode = new Node(i);
        prev->next = newNode;
        prev = newNode;
      }

      prev->next = head; 
    }

    int getJosephusPosition(int k) 
    {
      if (head == NULL || k <= 0) return -1;

      Node* prev = head;
      while (prev->next != head) 
      {
        prev = prev->next;
      }

      Node* curr = head;

      while (curr->next != curr) 
      {
        for (int i = 1; i < k; i++) 
        {
          prev = curr;
          curr = curr->next;
        }

        prev->next = curr->next;
        Node* toDelete = curr;
        curr = curr->next;
        delete toDelete;
      }

      int survivor = curr->data;
      delete curr; 
      head = NULL;
      return survivor;
    }
};

int main() 
{
  int N = 7, k = 3;
  CircularList cl;
  cl.createCircle(N);

  int survivor = cl.getJosephusPosition(k);
  cout << "Survivor Position: " << survivor << endl;

  return 0;
}
