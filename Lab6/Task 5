#include <iostream>
#include <stack>
#include <string>
#include <cctype>
using namespace std;

int precedenceLevel(char op)
{
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

bool checkOperator(char ch)
{
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

string convertToPostfix(const string& infix)
{
    stack<char> operators;
    string postfix = "";

    for (size_t i = 0; i < infix.size(); i++)
    {
        char ch = infix[i];

        if (ch == ' ') continue;

        if (isdigit(ch))
        {
            string number = "";
            while (i < infix.size() && isdigit(infix[i]))
            {
                number += infix[i];
                i++;
            }
            postfix += number + " ";
            i--;
        }
        else if (ch == '(')
        {
            operators.push(ch);
        }
        else if (ch == ')')
        {
            while (!operators.empty() && operators.top() != '(')
            {
                postfix += operators.top();
                postfix += ' ';
                operators.pop();
            }
            if (!operators.empty()) operators.pop();
        }
        else if (checkOperator(ch))
        {
            while (!operators.empty() && precedenceLevel(operators.top()) >= precedenceLevel(ch))
            {
                postfix += operators.top();
                postfix += ' ';
                operators.pop();
            }
            operators.push(ch);
        }
    }

    while (!operators.empty())
    {
        postfix += operators.top();
        postfix += ' ';
        operators.pop();
    }

    return postfix;
}

int calculatePostfix(const string& postfix)
{
    stack<int> nums;

    for (size_t i = 0; i < postfix.size(); i++)
    {
        char ch = postfix[i];

        if (ch == ' ') continue;

        if (isdigit(ch))
        {
            int val = 0;
            while (i < postfix.size() && isdigit(postfix[i]))
            {
                val = val * 10 + (postfix[i] - '0');
                i++;
            }
            nums.push(val);
            i--;
        }
        else if (checkOperator(ch))
        {
            if (nums.size() < 2)
            {
                cerr << "Error: Invalid expression\n";
                exit(1);
            }

            int b = nums.top(); nums.pop();
            int a = nums.top(); nums.pop();
            int res = 0;

            switch (ch)
            {
                case '+': res = a + b; break;
                case '-': res = a - b; break;
                case '*': res = a * b; break;
                case '/':
                    if (b == 0)
                    {
                        cerr << "Error: Division by zero\n";
                        exit(1);
                    }
                    res = a / b;
                    break;
            }

            nums.push(res);
        }
    }

    if (nums.size() != 1)
    {
        cerr << "Error: Invalid postfix expression\n";
        exit(1);
    }

    return nums.top();
}

int main()
{
    string input;
    cout << "Enter infix expression: ";
    getline(cin, input);

    if (input.empty())
    {
        cerr << "Error: Empty expression\n";
        return 1;
    }

    string postfix = convertToPostfix(input);
    cout << "Postfix form: " << postfix << endl;

    int result = calculatePostfix(postfix);
    cout << "Result: " << result << endl;

    return 0;
}

