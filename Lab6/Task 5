#include <iostream>
using namespace std;

#define MAX 100

class CharStack
{
private:
    char arr[MAX];
    int top;
public:
    CharStack()
    {
        top = -1;
    }
    bool isEmpty()
    {
        return top == -1;
    }
    bool isFull()
    {
        return top == MAX - 1;
    }
    void push(char c)
    {
        if (!isFull()) arr[++top] = c;
    }
    char pop()
    {
        if (!isEmpty()) return arr[top--];
        return '\0';
    }
    char peek()
    {
        if (!isEmpty()) return arr[top];
        return '\0';
    }
};

class IntStack
{
private:
    int arr[MAX];
    int top;
public:
    IntStack()
    {
        top = -1;
    }
    bool isEmpty()
    {
        return top == -1;
    }
    bool isFull()
    {
        return top == MAX - 1;
    }
    void push(int x)
    {
        if (!isFull()) arr[++top] = x;
    }
    int pop()
    {
        if (!isEmpty()) return arr[top--];
        return 0;
    }
};

int precedence(char op)
{
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

bool isOperator(char c)
{
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

bool isOperand(char c)
{
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9');
}

bool isRightAssociative(char op)
{
    return op == '^';
}

void infixToPostfix(char infix[], char postfix[])
{
    CharStack st;
    int i = 0, j = 0;

    while (infix[i] != '\0')
    {
        char c = infix[i];

        if (c == ' ')
        {
            i++;
            continue;
        }

        if (isOperand(c))
        {
            postfix[j++] = c;
        }
        else if (c == '(')
        {
            st.push(c);
        }
        else if (c == ')')
        {
            while (!st.isEmpty() && st.peek() != '(')
            {
                postfix[j++] = st.pop();
            }
            if (!st.isEmpty()) st.pop();
        }
        else if (isOperator(c))
        {
            while (!st.isEmpty() && st.peek() != '(' &&
                  (precedence(st.peek()) > precedence(c) ||
                   (precedence(st.peek()) == precedence(c) && !isRightAssociative(c))))
            {
                postfix[j++] = st.pop();
            }
            st.push(c);
        }

        i++;
    }

    while (!st.isEmpty())
    {
        postfix[j++] = st.pop();
    }

    postfix[j] = '\0';
}

int applyOperation(int a, int b, char op)
{
    if (op == '+') return a + b;
    if (op == '-') return a - b;
    if (op == '*') return a * b;
    if (op == '/') return a / b;
    if (op == '^')
    {
        int res = 1;
        for (int i = 0; i < b; i++) res *= a;
        return res;
    }
    return 0;
}

int evaluatePostfix(char postfix[])
{
    IntStack st;
    int i = 0;

    while (postfix[i] != '\0')
    {
        char c = postfix[i];

        if (c >= '0' && c <= '9')
        {
            st.push(c - '0');
        }
        else if (isOperator(c))
        {
            int val2 = st.pop();
            int val1 = st.pop();
            int result = applyOperation(val1, val2, c);
            st.push(result);
        }

        i++;
    }

    return st.pop();
}

int main()
{
    char infix[MAX], postfix[MAX];

    cout << "Enter infix expression: ";
    cin.getline(infix, MAX);

    infixToPostfix(infix, postfix);
    cout << "Postfix: " << postfix << endl;

    cout << "Result: " << evaluatePostfix(postfix) << endl;

    return 0;
}
